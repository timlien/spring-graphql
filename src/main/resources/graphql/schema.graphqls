type Query {
    # section 01
    hello: String
    helloTo(name: String): String

    # section 02
    customers: [Customer]
    customerById(id: ID!): Customer
    customersByName(name: String!): [Customer]
    customersByAge(ageFilter: AgeFilter): [Customer]

    # section 03
    bookStores: [BookStore]!

    # section 04
    bookStoreDtos: [BookStoreDto]!

    # section 05
    level1: Level1

    # section 06
    car: Car
    products: [Product]

    # section 07
    items: [Item]

    # section 08
    search: [SearchResult]

    # section 09
    accounts: [Account]
    accountById(id: ID!): Account
}

type Mutation {
    createAccount(accountDto: AccountDto!): Account
    updateAccount(id: ID!, accountDto: AccountDto!): Account
    deleteAccount(id: ID!): DeleteResponseDto!
}

# section 02
type Customer {
    id: ID!
    name: String!
    email: String!
    age: Int
}

input AgeFilter {
    minAge: Int
    maxAge: Int
}

# section 03
type BookStore {
    id: ID!
    name: String!
    books: [Book]!
    booksWithLimit(limit: Int!): [Book]!
    booksConcurrent: [Book]!
    booksWithoutNPlus1ByList: [Book]!
    booksWithoutNPlus1ByMap: [Book]!
}

type Book {
    id: ID!
    title: String!
    bookStoreId: ID!
}

# section 04
type BookStoreDto {
    id: ID!
    name: String!
    books: [Book]!
}

# section 05
type Level1 {
    level2: Level2
}

type Level2 {
    level3: Level3
}

type Level3 {
    level4: Level4
}

type Level4 {
    level5: Level5
}

type Level5 {
    id: ID!
}

# section 06
scalar Long
scalar Byte
scalar Short
scalar BigDecimal
scalar BigInteger
scalar Date
scalar LocalTime
scalar DateTime
scalar Object

type Car {
    number: ID!
    name: String
    height: Int
    tank: Float
    secondHand: Boolean
    serialNumber: Long
    ageInYears: Byte
    ageInMonths: Short
    price: BigDecimal
    distance: BigInteger
    createDate: Date
    createTime: LocalTime
    createDateTime: DateTime
    Type: CarType
}

enum CarType {
    MAZDA
    BMW
}

type Product{
    name: String
    attributes: Object
}

# section 07
interface Item {
    id: ID!
    price: Float
}

type Food implements Item {
    id: ID!
    price: Float
    expiryDate: Date
}

type Electronic implements Item {
    id: ID!
    price: Float
    warranty: Int
}

type Furniture implements Item {
    id: ID!
    price: Float
    material: String
}

# section 08
union SearchResult = Image | Map | Website

type Image {
    blob: String
}

type Map {
    location: String
}

type Website {
    url: String
}

# section 09
type Account {
    id: ID!
    name: String
    age: Int
}

input AccountDto {
    name: String
    age: Int
}

type DeleteResponseDto {
    id: ID!
    status: Status
}

enum Status {
    SUCCESS
    FAILURE
}